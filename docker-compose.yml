x-superset-user: &superset-user root
x-superset-volumes: &superset-volumes
  # /app/pythonpath_docker will be appended to the PYTHONPATH in the final container
  - ./docker:/app/docker
  # - ./superset:/app/superset
  - ./docker/superset_config.py:/app/pythonpath/superset_config.py

services : 
  db:
    container_name: postgres_container
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: db_user
      POSTGRES_PASSWORD: db_password
      
    volumes:
      - ./postgres/data:/var/lib/postgresql/data  
      - ./postgres/airflow_init.sql:/docker-entrypoint-initdb.d/airflow_init.sql
      - ./postgres/superset_init.sql:/docker-entrypoint-initdb.d/superset_init.sql
    networks:
      - pg_network 


  af:
    container_name: airflow_container
    image: apache/airflow:3.0.0
    ports:
      - "8081:8080"
    environment:
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@db:5432/airflow_db
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./api_request:/opt/airflow/api_request
      - /var/run/docker.sock:/var/run/docker.sock

    depends_on:
      - db
    networks:
      - pg_network
    command: >  
      bash -c "airflow db migrate && airflow standalone"
    user: 
      root
  

  dbt: 
    container_name: dbt_container
    image: ghcr.io/dbt-labs/dbt-postgres:1.9.latest
    volumes:
      - ./dbt/my_project:/usr/app
      - ./dbt:/root/.dbt
    working_dir: /usr/app
    environment:
      DBT_PROFILES_DIR: "/root/.dbt"
    depends_on:
      - db
    networks:
      - pg_network  
    command:   run



  superset-init:
      image: apache/superset:3.0.0-py310
      container_name: superset_init
      command: ["/app/docker/docker-init.sh"]
      env_file:
        - path: docker/.env # default
          required: true
      depends_on:
        db:
          condition: service_started
        redis:
          condition: service_started
      user: *superset-user
      volumes: *superset-volumes
      environment:
          DATABASE_DIALECT: "postgresql+psycopg2"
          DATABASE_HOST: "db"
          DATABASE_PORT: 5432
          DATABASE_DB: "superset"  
          DATABASE_USER: "superset"
          DATABASE_PASSWORD: "superset"
          SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
          SUPERSET_LOAD_EXAMPLES: "${SUPERSET_LOAD_EXAMPLES:-yes}"
      healthcheck:
        disable: true
      networks:
        - pg_network


  superset:
    env_file:
      - path: docker/.env # default
        required: true
    image: apache/superset:3.0.0-py310
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app"]
    restart: unless-stopped
    ports:
      - 8088:8088
    user: *superset-user
    depends_on:
      superset-init:
        condition: service_completed_successfully
    volumes: *superset-volumes
    environment: 
        DATABASE_DIALECT: "postgresql+psycopg2"
        DATABASE_HOST: "db"
        DATABASE_PORT: 5432
        DATABASE_DB: "superset" 
        DATABASE_USER: "superset"
        DATABASE_PASSWORD: "superset"
        SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
        SUPERSET_LOAD_EXAMPLES: "${SUPERSET_LOAD_EXAMPLES:-yes}"
    networks :
      - pg_network


  
  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis:/data
    networks:
      - pg_network  

networks:
  pg_network:
    external: true

volumes:
  redis:
    external: false




# 1- To find the Ip address of the container, you can use the command : sudo docker inspect postgres_container | grep "IPAddress"
# 2- to find the network in docker , you can use the command          : sudo docker network ls
# 3- every time you connect the container, you need to run the command: sudo docker compose up -d
# 4- to stop the container, you can use the command                   : sudo docker compose down
# 5- to run postgres , you can use the command                        : sudo docker exec -it postgres_container psql -U db_user -d db
# 6- to check current permission of the file, you can use the command : ls -l ./postgres/data
# 7- to change permission error, you can use the command              : sudo chmod 777 ./postgres/data
# 8- to change the permission group of the file, use the command      : sudo chgrp -R $USER ./postgres/data
